import { useEffect } from "react";
import useRefreshToken from "./useRefreshToken";
import axios from "axios";
import useAuth from "./useAuth";

const useAxiosPrivate = () => {
  const refresh = useRefreshToken();
  const { user } = useAuth();

  useEffect(() => {
    const requestIntercept = axios.interceptors.request.use(
      (config) => {
        if (!config) {
          config = {};
        }
        if (!config.headers) {
          config.headers = {};
        }
        if (!config.headers["access-token"]) {
          axios.defaults.headers.common[
            "access-token"
          ] = `${user?.accessToken}`;
          config.headers["access-token"] = `${user?.accessToken}`;
        }
        return config;
      },
      (error) => Promise.reject(error)
    );

    const responseIntercept = axios.interceptors.response.use(
      (response) => response,
      async (error) => {
        const prevRequest = error?.config;
        if ((error?.response?.status === 403 || 404) && !prevRequest.sent) {
          prevRequest.sent = true;
          const newAccessToken = await refresh();
          console.log(newAccessToken);
          prevRequest.headers["access-token"] = `${newAccessToken}`;
          //localStorage.setItem("access-token", `${newAccessToken}`);
          return axios(prevRequest);
        }
        return Promise.reject(error);
      }
    );

    return () => {
      axios.interceptors.response.eject(responseIntercept);
      axios.interceptors.request.eject(requestIntercept);
    };
  }, [user, refresh]);

  return axios;
};
export default useAxiosPrivate;
